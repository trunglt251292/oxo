{"version":3,"sources":["../app.js"],"names":["app","debug","require","http","socketio","port","normalizePort","process","env","PORT","server","createServer","io","listen","use","set","join","__dirname","static","json","urlencoded","extended","req","res","next","err","Error","status","locals","message","error","get","render","sockets","on","socket","console","log","id","onError","onListening","val","parseInt","isNaN","syscall","bind","code","exit","addr","address"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;AACA;;;;;;AACA;;;;AALA;;;AAXA;;;AAmBA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,QAAQC,QAAQ,OAAR,EAAiB,kBAAjB,CAAd;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,WAAWF,QAAQ,WAAR,CAAjB;AACA,IAAMG,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAlC,CAAb;AACA,IAAMC,SAASP,KAAKQ,YAAL,CAAkBX,GAAlB,CAAf;AACA,IAAMY,KAAKR,SAASS,MAAT,CAAgBH,MAAhB,CAAX;;AAEA;;;;;;;;AAQA;;;AAGAV,IAAIc,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAd,IAAIe,GAAJ,CAAQ,OAAR,EAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAhB;AACAjB,IAAIe,GAAJ,CAAQ,aAAR,EAAsB,KAAtB;AACAf,IAAIe,GAAJ,CAAQ,MAAR,EAAeV,IAAf;AACAL,IAAIc,GAAJ,CAAQ,kBAAQI,MAAR,CAAe,eAAKF,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAjB,IAAIc,GAAJ,CAAQ,qBAAWK,IAAX,EAAR;AACAnB,IAAIc,GAAJ,CAAQ,qBAAWM,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACArB,IAAIc,GAAJ,CAAQ,UAACQ,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACvB,MAAIC,MAAM,IAAIC,KAAJ,CAAU,YAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACA,CAJD;AAKAzB,IAAIc,GAAJ,CAAQ,UAASW,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAItB,GAAJ,CAAQ+B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;AACA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIS,MAAJ,CAAW,OAAX;AACD,CAPD;AAQA;;;AAGA;;;AAGA,0BAAWhC,GAAX;AACA;;;AAGCY,GAAGqB,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA2B,UAACC,MAAD,EAAU;AACnCC,UAAQC,GAAR,CAAY,oCAAkCF,OAAOG,EAArD;AACAH,SAAOD,EAAP,CAAU,YAAV,EAAuB,YAAI;AAC3BE,YAAQC,GAAR,CAAeF,OAAOG,EAAtB;AACA,GAFA;AAGD,CALD;AAMD;;;AAGC5B,OAAOG,MAAP,CAAcR,IAAd,EAAmB,YAAU;AAC3B+B,UAAQC,GAAR,CAAY,0CAAwChC,IAApD;AACD,CAFD;;AAIA;;AAEAK,OAAOwB,EAAP,CAAU,OAAV,EAAkBK,OAAlB;AACA7B,OAAOwB,EAAP,CAAU,WAAV,EAAsBM,WAAtB;;AAEA;AACA,SAASlC,aAAT,CAAuBmC,GAAvB,EAA4B;AAC1B,MAAIpC,OAAOqC,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMtC,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOoC,GAAP;AACD;;AAED,MAAIpC,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASkC,OAAT,CAAiBT,KAAjB,EAAwB;AACtB,MAAIA,MAAMc,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMd,KAAN;AACD;;AAED,MAAIe,OAAO,OAAOxC,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQyB,MAAMgB,IAAd;AACE,SAAK,QAAL;AACEV,cAAQN,KAAR,CAAce,OAAO,+BAArB;AACAtC,cAAQwC,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACEX,cAAQN,KAAR,CAAce,OAAO,oBAArB;AACAtC,cAAQwC,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMjB,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASU,WAAT,GAAuB;AACrB,MAAIQ,OAAOtC,OAAOuC,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAK3C,IAFnB;AAGAJ,QAAM,kBAAkB4C,IAAxB;AACD;kBACa7C,G","file":"app.js","sourcesContent":["/**\n * Creating Project REST API Project\n */\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport fs from \"fs\";\nimport cookieParser from \"cookie-parser\";\nimport mongoose from \"mongoose\";\nimport morgan from \"morgan\";\nimport path from \"path\";\r\nimport favicon from 'serve-favicon';\r\n/**\r\n * Router variables\r\n */\nimport routertest from \"./routers/routerexam\"\r\nimport controllexam from \"./controlls/controllexam\";\n/**\n * Global variables\n */\nconst app = express();\r\nconst debug = require('debug')('workspace:server');\r\nconst http = require('http');\r\nconst socketio = require('socket.io');\r\nconst port = normalizePort(process.env.PORT || 3000);\r\nconst server = http.createServer(app);\r\nconst io = socketio.listen(server);\n\n/**\n * Database\nconst url = <url database>\nmongoose.connect(url,(err)=>{\n\tif(err)\n\t\tconsole.log(err);\n\tconsole.log('Da ket noi ket noi thanh cong!!!!');\n})*/\n/**\n * Use, Set\n */\napp.use(morgan(\"dev\"));\napp.set(\"views\",path.join(__dirname, \"views\"));\napp.set(\"view engine\",\"ejs\");\r\napp.set('port',port);\napp.use(express.static(path.join(__dirname, \"public\")));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use((req,res,next)=>{\n\tlet err = new Error('Not Found!');\n\terr.status = 404;\n\tnext(err);\n});\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n/**\n * API\n */\r\n/**\r\n * Socket IO\r\n */\nroutertest(app);\r\n/**\r\n * Socket IO\r\n */\r\n io.sockets.on('connection',(socket)=>{\r\n   console.log('Co nguoi ket noi bang socket : '+socket.id);\r\n   socket.on(\"disconnect\",()=>{\r\n \t\tconsole.log(`${socket.id} da ngat ket noi Server`);\r\n \t});\r\n });\n/**\r\n * Setup Dev\r\n */\r\n server.listen(port,function(){\r\n   console.log('Server dang hoat dong nhe!!!! port : '+port);\r\n });\r\n\r\n // server lang nghe\r\n\r\n server.on('error',onError);\r\n server.on('listening',onListening);\r\n\r\n // method\r\n function normalizePort(val) {\r\n   var port = parseInt(val, 10);\r\n\r\n   if (isNaN(port)) {\r\n     // named pipe\r\n     return val;\r\n   }\r\n\r\n   if (port >= 0) {\r\n     // port number\r\n     return port;\r\n   }\r\n\r\n   return false;\r\n }\r\n\r\n /**\r\n  * Event listener for HTTP server \"error\" event.\r\n  */\r\n\r\n function onError(error) {\r\n   if (error.syscall !== 'listen') {\r\n     throw error;\r\n   }\r\n\r\n   var bind = typeof port === 'string'\r\n     ? 'Pipe ' + port\r\n     : 'Port ' + port;\r\n\r\n   // handle specific listen errors with friendly messages\r\n   switch (error.code) {\r\n     case 'EACCES':\r\n       console.error(bind + ' requires elevated privileges');\r\n       process.exit(1);\r\n       break;\r\n     case 'EADDRINUSE':\r\n       console.error(bind + ' is already in use');\r\n       process.exit(1);\r\n       break;\r\n     default:\r\n       throw error;\r\n   }\r\n }\r\n\r\n /**\r\n  * Event listener for HTTP server \"listening\" event.\r\n  */\r\n\r\n function onListening() {\r\n   var addr = server.address();\r\n   var bind = typeof addr === 'string'\r\n     ? 'pipe ' + addr\r\n     : 'port ' + addr.port;\r\n   debug('Listening on ' + bind);\r\n }\nexport default app;\r\n"]}